"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os 

from pathlib import Path
from datetime import timedelta

# To have more control on scheduling tasks
from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# # --- Move to dev.py, prod.py
# # SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-92%dq9-^+%*&&f00&zvrr%rpzppxh6zdmrc+=pv)s-x_ul08*7'


# # # --- Move to dev.py, prod.py
# # SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
# # Only required if DEBUG is True
# ALLOWED_HOSTS = ['*']

# # Debugginhgpurposes 
INTERNAL_IPS = ['127.0.0.1']

# CORS Cross Origin Resource Sharing 
# For details see: https://github.com/adamchainz/django-cors-headers
# One of three shoud be defined:
# CORS_ALLOWED_ORIGINS = ['', '', ...]
# CORS_ALLOWED_ORIGIN_REGEXES = ['regex']
# CORS_ALLOW_ALL_ORIGINS: bool
# CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOWED_ORIGINS = [
    'http://localhost:8001',
    'http://127.0.0.1:8001'
]

# SMTP used: https://github.com/rnwood/smtp4dev/wiki/Installation
# EMAIL backends setup 
# SMPT backed is used by default
# More info on: https://docs.djangoproject.com/en/5.1/topics/email/

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'localhost'
# Leave blanck for fake smtp server
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
EMAIL_PORT = 2525
DEFAULT_FROM_EMAIL = 'from@seth.com'

# Setting up admins 

ADMINS = [
    ('Me', 'seth@seth.com')
]


# settings.py
# Set AUTH_PASSWORD_VALIDATORD to empty list
# to prevent any validations. 
# Make sure to commetn origin variable in the end of the page.
# AUTH_PASSWORD_VALIDATORS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.sessions',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'djoser',
    'silk',
    'django_filters',
    'demo',
    'debug_toolbar',
    'store',
    'tags',
    'likes',
    'core'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    # 'silk.middleware.SilkyMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Comment debug_toolbar.middleware.DebugToolbarMiddleware for performance test in Locust
    # 'debug_toolbar.middleware.DebugToolbarMiddleware'
]

# if DEBUG:
#     MIDDLEWARE.append('silk.middleware.SilkyMiddleware')

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# # Database
# # https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# # # # --- Move to dev.py, prod.py
# DATABASES = {
    
#     # 'default': {
#     #     'ENGINE': 'django.db.backends.sqlite3',
#     #     'NAME': BASE_DIR / 'db.sqlite3',
#     # }
    
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'django_basic_db',
#         'USER': 'admin',
#         'PASSWORD': 'admin1234',
#         'HOST': 'localhost',  # or your PostgreSQL host
#         'PORT': '5432',        # default PostgreSQL port
#         # 'ATOMIC_REQUESTS': True  # Applay transaction for every request
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
# Settings up STATIS ROOT to let the Django know
# where the static files located on disk
# Thes will allow to collect static files from different apps
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Meia andpoint where stored all uploaded files
# Have to be two be two slashes
MEDIA_URL = '/media/'
# Media root - full path to the media directory
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'COERCE_DECIMAL_TO_STRING': False,
    # Works if pagination Set Up globally. Better define page size in custom class.
    # 'PAGE_SIZE': 10,
    # # Apply pagination globally to all views. Pagination by page number.
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # # Apply pagination globally to all views. Pagination by Limit Offset
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination'
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.IsAuthenticated'
    # ]
}

AUTH_USER_MODEL = 'core.User'

# All settings at https://djoser.readthedocs.io/en/latest/settings.html
DJOSER = {
    # 'PASSWORD_RESET_CONFIRM_URL': '#/password/reset/confirm/{uid}/{token}',
    # 'USERNAME_RESET_CONFIRM_URL': '#/username/reset/confirm/{uid}/{token}',
    # 'ACTIVATION_URL': '#/activate/{uid}/{token}',
    # 'SEND_ACTIVATION_EMAIL': True,
    'SERIALIZERS': {
        'user_create': 'core.serializers.UserCreateSerializer',
        'current_user': 'core.serializers.UserSerializer'
    }
}

# All settings at https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html
SIMPLE_JWT = {
    # Good settings
    # "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    # "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    # Setting lifetime to one day for learning purposes
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=5),
    'AUTH_HEADER_TYPES': ('JWT',),
}


# In the configuration line CELERY_BROKER_URL = 'redis://localhost:6379/1', 
# the /1 at the end of the Redis URL indicates which Redis database to use.

# Redis servers can host multiple databases, each identified by 
# a number (typically ranging from 0 to 15 by default). By specifying /1, 
# you are telling Celery to connect to and use Redis database 1 instead of 
# the default database 0.
CELERY_BROKER_URL = 'redis://localhost:6379/1'
# To schedule automated tasks 
CELERY_BEAT_SCHEDULE = {
    'notify_customers': {
        'task': 'demo.tasks.notify_customers',
        'schedule': 5, # Every 5 seconds
        # 'schedule': 15 * 60 # For 15 minutes
        # 'schedule': crontab(day_of_week='1', hour='7', minute='3') # Every monday at 7:03 a.m.
        # 'schedule': crontab(minute='*/15') # Every 15 minutes
        'args': ['Hello World'], # For arguments
        'kwargs': {} # For kwargs
    }
}


# Setting django.core.cache.cache default object
# Default timeout is 300 sec. (5 min.)
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        # Global time out
        "TIMEOUT": 10 * 60,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}



LOGGING = {
    'version': 1,
    # Best Practice
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '[{levelname}] {asctime} - {module} - {message}',
            'style': '{', # This allows the use of `{}`-style formatting
        },
        'detailed': {
            'format': '[{levelname}] {asctime} - {pathname} - func: {funcName} - line: {lineno} - {message}',
            'style': '{', # str.format()
            # 'style': '$'  # string.Template class
        }
        },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/logs.log'),
            'formatter': 'simple',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        }
    },
    'loggers': {
        # 'demo': {
        #     'handlers': ['file', 'console'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },
        # With empty string instead of the name
        # The logger willcapture all logs from all the apps
        '': {
            'handlers': ['file', 'console'],
            'level': os.environ.get('DJANGO_DEBUG_LEVEL', 'INFO'),
            'propagate': True,
        }
    }
}

